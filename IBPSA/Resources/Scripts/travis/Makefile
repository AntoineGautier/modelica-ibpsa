############################################################
# Makefile for the regression tests that are run on travis
############################################################
ROOT = ../../../..

test-documentation:
	(cd $(ROOT)/IBPSA; ../bin/runUnitTests.py --validate-html-only)
	(cd $(ROOT)/IBPSA/Resources/src/fluid/heatpumps/calibration/doc; make regressiontest)

test-experiment-setup:
	(cd $(ROOT)/IBPSA; ../bin/runUnitTests.py --validate-experiment-setup)

test-autogenerated-files:
	# Check for package.order to be up to date
	(cd  $(ROOT)/IBPSA; \
	  python -c 'import buildingspy.development.refactor as r; \
	  r.write_package_order(".", recursive=True)'; \
	  git diff --exit-code . )

test-for-wrong-strings:
	# Make sure there are no invalid strings
	(cd  $(ROOT)/IBPSA; \
	  foundError="false"
	  for wrongString in \
	        modelica://AixLib \
	        modelica://Buildings \
	        modelica://BuildingSystems \
	          modelica://IDEAS \
			  modelica://https; do \
	         content=$(for ff in `find . -name '*.mo'`; do grep "${wrongString}" $ff; done); \
	         if [ -n "${content}" ]; then
	           echo "Error: Found invalid string ${wrongString} in"; \
			   for ff in `find . -name '*.mo'`; do
	              if [ `grep -c "${wrongString}" $ff` != 0 ]; then
			        echo "  $ff"; \
				  fi; \
			   done; \
	           foundError="true"; \
	         fi; \
	      done; \
		  if [ ${foundError} == "true" ]; then
		    exit 1; \
		  fi;
	)

test-dymola:
	(cd $(ROOT)/IBPSA && python ../bin/runUnitTests.py --batch --single-package $(PACKAGE) --tool dymola)

test-jmodelica:
	(cd $(ROOT)/IBPSA && python ../bin/runUnitTests.py --batch --single-package $(PACKAGE) --tool jmodelica --skip-verification)
